{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { inject, NgZone, Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, shareReplay, takeUntil } from 'rxjs/operators';\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\n\nconst loopLimitExceededErrorHandler = e => {\n  if (e instanceof Error && e.message === 'ResizeObserver loop limit exceeded') {\n    console.error(`${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`);\n  }\n};\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\n\n\nclass SingleBoxSharedResizeObserver {\n  constructor(\n  /** The box type to observe for resizes. */\n  _box) {\n    this._box = _box;\n    /** Stream that emits when the shared observer is destroyed. */\n\n    this._destroyed = new Subject();\n    /** Stream of all events from the ResizeObserver. */\n\n    this._resizeSubject = new Subject();\n    /** A map of elements to streams of their resize events. */\n\n    this._elementObservables = new Map();\n\n    if (typeof ResizeObserver !== 'undefined') {\n      this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n    }\n  }\n  /**\n   * Gets a stream of resize events for the given element.\n   * @param target The element to observe.\n   * @return The stream of resize events for the element.\n   */\n\n\n  observe(target) {\n    if (!this._elementObservables.has(target)) {\n      this._elementObservables.set(target, new Observable(observer => {\n        const subscription = this._resizeSubject.subscribe(observer);\n\n        this._resizeObserver?.observe(target, {\n          box: this._box\n        });\n        return () => {\n          this._resizeObserver?.unobserve(target);\n          subscription.unsubscribe();\n\n          this._elementObservables.delete(target);\n        };\n      }).pipe(filter(entries => entries.some(entry => entry.target === target)), // Share a replay of the last event so that subsequent calls to observe the same element\n      // receive initial sizing info like the first one. Also enable ref counting so the\n      // element will be automatically unobserved when there are no more subscriptions.\n      shareReplay({\n        bufferSize: 1,\n        refCount: true\n      }), takeUntil(this._destroyed)));\n    }\n\n    return this._elementObservables.get(target);\n  }\n  /** Destroys this instance. */\n\n\n  destroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this._resizeSubject.complete();\n\n    this._elementObservables.clear();\n  }\n\n}\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\n\n\nclass SharedResizeObserver {\n  constructor() {\n    /** Map of box type to shared resize observer. */\n    this._observers = new Map();\n    /** The Angular zone. */\n\n    this._ngZone = inject(NgZone);\n\n    if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      this._ngZone.runOutsideAngular(() => {\n        window.addEventListener('error', loopLimitExceededErrorHandler);\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    for (const [, observer] of this._observers) {\n      observer.destroy();\n    }\n\n    this._observers.clear();\n\n    if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      window.removeEventListener('error', loopLimitExceededErrorHandler);\n    }\n  }\n  /**\n   * Gets a stream of resize events for the given target element and box type.\n   * @param target The element to observe for resizes.\n   * @param options Options to pass to the `ResizeObserver`\n   * @return The stream of resize events for the element.\n   */\n\n\n  observe(target, options) {\n    const box = options?.box || 'content-box';\n\n    if (!this._observers.has(box)) {\n      this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n    }\n\n    return this._observers.get(box).observe(target);\n  }\n\n  static #_ = this.ɵfac = function SharedResizeObserver_Factory(t) {\n    return new (t || SharedResizeObserver)();\n  };\n  static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SharedResizeObserver,\n    factory: SharedResizeObserver.ɵfac,\n    providedIn: 'root'\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SharedResizeObserver, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { SharedResizeObserver };","map":{"version":3,"names":["i0","inject","NgZone","Injectable","Subject","Observable","filter","shareReplay","takeUntil","loopLimitExceededErrorHandler","e","Error","message","console","error","SingleBoxSharedResizeObserver","constructor","_box","_destroyed","_resizeSubject","_elementObservables","Map","ResizeObserver","_resizeObserver","entries","next","observe","target","has","set","observer","subscription","subscribe","box","unobserve","unsubscribe","delete","pipe","some","entry","bufferSize","refCount","get","destroy","complete","clear","SharedResizeObserver","_observers","_ngZone","ngDevMode","runOutsideAngular","window","addEventListener","ngOnDestroy","removeEventListener","options","ɵfac","ɵprov","type","args","providedIn"],"sources":["C:/selise/twitter/node_modules/@angular/cdk/fesm2022/observers/private.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, NgZone, Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, shareReplay, takeUntil } from 'rxjs/operators';\n\n/**\n * Handler that logs \"ResizeObserver loop limit exceeded\" errors.\n * These errors are not shown in the Chrome console, so we log them to ensure developers are aware.\n * @param e The error\n */\nconst loopLimitExceededErrorHandler = (e) => {\n    if (e instanceof Error && e.message === 'ResizeObserver loop limit exceeded') {\n        console.error(`${e.message}. This could indicate a performance issue with your app. See https://github.com/WICG/resize-observer/blob/master/explainer.md#error-handling`);\n    }\n};\n/**\n * A shared ResizeObserver to be used for a particular box type (content-box, border-box, or\n * device-pixel-content-box)\n */\nclass SingleBoxSharedResizeObserver {\n    constructor(\n    /** The box type to observe for resizes. */\n    _box) {\n        this._box = _box;\n        /** Stream that emits when the shared observer is destroyed. */\n        this._destroyed = new Subject();\n        /** Stream of all events from the ResizeObserver. */\n        this._resizeSubject = new Subject();\n        /** A map of elements to streams of their resize events. */\n        this._elementObservables = new Map();\n        if (typeof ResizeObserver !== 'undefined') {\n            this._resizeObserver = new ResizeObserver(entries => this._resizeSubject.next(entries));\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given element.\n     * @param target The element to observe.\n     * @return The stream of resize events for the element.\n     */\n    observe(target) {\n        if (!this._elementObservables.has(target)) {\n            this._elementObservables.set(target, new Observable(observer => {\n                const subscription = this._resizeSubject.subscribe(observer);\n                this._resizeObserver?.observe(target, { box: this._box });\n                return () => {\n                    this._resizeObserver?.unobserve(target);\n                    subscription.unsubscribe();\n                    this._elementObservables.delete(target);\n                };\n            }).pipe(filter(entries => entries.some(entry => entry.target === target)), \n            // Share a replay of the last event so that subsequent calls to observe the same element\n            // receive initial sizing info like the first one. Also enable ref counting so the\n            // element will be automatically unobserved when there are no more subscriptions.\n            shareReplay({ bufferSize: 1, refCount: true }), takeUntil(this._destroyed)));\n        }\n        return this._elementObservables.get(target);\n    }\n    /** Destroys this instance. */\n    destroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._resizeSubject.complete();\n        this._elementObservables.clear();\n    }\n}\n/**\n * Allows observing resize events on multiple elements using a shared set of ResizeObserver.\n * Sharing a ResizeObserver instance is recommended for better performance (see\n * https://github.com/WICG/resize-observer/issues/59).\n *\n * Rather than share a single `ResizeObserver`, this class creates one `ResizeObserver` per type\n * of observed box ('content-box', 'border-box', and 'device-pixel-content-box'). This avoids\n * later calls to `observe` with a different box type from influencing the events dispatched to\n * earlier calls.\n */\nclass SharedResizeObserver {\n    constructor() {\n        /** Map of box type to shared resize observer. */\n        this._observers = new Map();\n        /** The Angular zone. */\n        this._ngZone = inject(NgZone);\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            this._ngZone.runOutsideAngular(() => {\n                window.addEventListener('error', loopLimitExceededErrorHandler);\n            });\n        }\n    }\n    ngOnDestroy() {\n        for (const [, observer] of this._observers) {\n            observer.destroy();\n        }\n        this._observers.clear();\n        if (typeof ResizeObserver !== 'undefined' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            window.removeEventListener('error', loopLimitExceededErrorHandler);\n        }\n    }\n    /**\n     * Gets a stream of resize events for the given target element and box type.\n     * @param target The element to observe for resizes.\n     * @param options Options to pass to the `ResizeObserver`\n     * @return The stream of resize events for the element.\n     */\n    observe(target, options) {\n        const box = options?.box || 'content-box';\n        if (!this._observers.has(box)) {\n            this._observers.set(box, new SingleBoxSharedResizeObserver(box));\n        }\n        return this._observers.get(box).observe(target);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SharedResizeObserver, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SharedResizeObserver, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: SharedResizeObserver, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return []; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { SharedResizeObserver };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,UAAzB,QAA2C,eAA3C;AACA,SAASC,OAAT,EAAkBC,UAAlB,QAAoC,MAApC;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,QAA+C,gBAA/C;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,6BAA6B,GAAIC,CAAD,IAAO;EACzC,IAAIA,CAAC,YAAYC,KAAb,IAAsBD,CAAC,CAACE,OAAF,KAAc,oCAAxC,EAA8E;IAC1EC,OAAO,CAACC,KAAR,CAAe,GAAEJ,CAAC,CAACE,OAAQ,8IAA3B;EACH;AACJ,CAJD;AAKA;AACA;AACA;AACA;;;AACA,MAAMG,6BAAN,CAAoC;EAChCC,WAAW;EACX;EACAC,IAFW,EAEL;IACF,KAAKA,IAAL,GAAYA,IAAZ;IACA;;IACA,KAAKC,UAAL,GAAkB,IAAId,OAAJ,EAAlB;IACA;;IACA,KAAKe,cAAL,GAAsB,IAAIf,OAAJ,EAAtB;IACA;;IACA,KAAKgB,mBAAL,GAA2B,IAAIC,GAAJ,EAA3B;;IACA,IAAI,OAAOC,cAAP,KAA0B,WAA9B,EAA2C;MACvC,KAAKC,eAAL,GAAuB,IAAID,cAAJ,CAAmBE,OAAO,IAAI,KAAKL,cAAL,CAAoBM,IAApB,CAAyBD,OAAzB,CAA9B,CAAvB;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;;;EACIE,OAAO,CAACC,MAAD,EAAS;IACZ,IAAI,CAAC,KAAKP,mBAAL,CAAyBQ,GAAzB,CAA6BD,MAA7B,CAAL,EAA2C;MACvC,KAAKP,mBAAL,CAAyBS,GAAzB,CAA6BF,MAA7B,EAAqC,IAAItB,UAAJ,CAAeyB,QAAQ,IAAI;QAC5D,MAAMC,YAAY,GAAG,KAAKZ,cAAL,CAAoBa,SAApB,CAA8BF,QAA9B,CAArB;;QACA,KAAKP,eAAL,EAAsBG,OAAtB,CAA8BC,MAA9B,EAAsC;UAAEM,GAAG,EAAE,KAAKhB;QAAZ,CAAtC;QACA,OAAO,MAAM;UACT,KAAKM,eAAL,EAAsBW,SAAtB,CAAgCP,MAAhC;UACAI,YAAY,CAACI,WAAb;;UACA,KAAKf,mBAAL,CAAyBgB,MAAzB,CAAgCT,MAAhC;QACH,CAJD;MAKH,CARoC,EAQlCU,IARkC,CAQ7B/B,MAAM,CAACkB,OAAO,IAAIA,OAAO,CAACc,IAAR,CAAaC,KAAK,IAAIA,KAAK,CAACZ,MAAN,KAAiBA,MAAvC,CAAZ,CARuB,EASrC;MACA;MACA;MACApB,WAAW,CAAC;QAAEiC,UAAU,EAAE,CAAd;QAAiBC,QAAQ,EAAE;MAA3B,CAAD,CAZ0B,EAYWjC,SAAS,CAAC,KAAKU,UAAN,CAZpB,CAArC;IAaH;;IACD,OAAO,KAAKE,mBAAL,CAAyBsB,GAAzB,CAA6Bf,MAA7B,CAAP;EACH;EACD;;;EACAgB,OAAO,GAAG;IACN,KAAKzB,UAAL,CAAgBO,IAAhB;;IACA,KAAKP,UAAL,CAAgB0B,QAAhB;;IACA,KAAKzB,cAAL,CAAoByB,QAApB;;IACA,KAAKxB,mBAAL,CAAyByB,KAAzB;EACH;;AA5C+B;AA8CpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,oBAAN,CAA2B;EACvB9B,WAAW,GAAG;IACV;IACA,KAAK+B,UAAL,GAAkB,IAAI1B,GAAJ,EAAlB;IACA;;IACA,KAAK2B,OAAL,GAAe/C,MAAM,CAACC,MAAD,CAArB;;IACA,IAAI,OAAOoB,cAAP,KAA0B,WAA1B,KAA0C,OAAO2B,SAAP,KAAqB,WAArB,IAAoCA,SAA9E,CAAJ,EAA8F;MAC1F,KAAKD,OAAL,CAAaE,iBAAb,CAA+B,MAAM;QACjCC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC3C,6BAAjC;MACH,CAFD;IAGH;EACJ;;EACD4C,WAAW,GAAG;IACV,KAAK,MAAM,GAAGvB,QAAH,CAAX,IAA2B,KAAKiB,UAAhC,EAA4C;MACxCjB,QAAQ,CAACa,OAAT;IACH;;IACD,KAAKI,UAAL,CAAgBF,KAAhB;;IACA,IAAI,OAAOvB,cAAP,KAA0B,WAA1B,KAA0C,OAAO2B,SAAP,KAAqB,WAArB,IAAoCA,SAA9E,CAAJ,EAA8F;MAC1FE,MAAM,CAACG,mBAAP,CAA2B,OAA3B,EAAoC7C,6BAApC;IACH;EACJ;EACD;AACJ;AACA;AACA;AACA;AACA;;;EACIiB,OAAO,CAACC,MAAD,EAAS4B,OAAT,EAAkB;IACrB,MAAMtB,GAAG,GAAGsB,OAAO,EAAEtB,GAAT,IAAgB,aAA5B;;IACA,IAAI,CAAC,KAAKc,UAAL,CAAgBnB,GAAhB,CAAoBK,GAApB,CAAL,EAA+B;MAC3B,KAAKc,UAAL,CAAgBlB,GAAhB,CAAoBI,GAApB,EAAyB,IAAIlB,6BAAJ,CAAkCkB,GAAlC,CAAzB;IACH;;IACD,OAAO,KAAKc,UAAL,CAAgBL,GAAhB,CAAoBT,GAApB,EAAyBP,OAAzB,CAAiCC,MAAjC,CAAP;EACH;;EAjCsB,YAkCd,KAAK6B,IAAL;IAAA,iBAAiGV,oBAAjG;EAAA,CAlCc;EAAA,aAmCd,KAAKW,KAAL,kBADuFzD,EACvF;IAAA,OAAqG8C,oBAArG;IAAA,SAAqGA,oBAArG;IAAA,YAAuI;EAAvI,EAnCc;AAAA;;AAqC3B;EAAA,mDAHoG9C,EAGpG,mBAA2F8C,oBAA3F,EAA6H,CAAC;IAClHY,IAAI,EAAEvD,UAD4G;IAElHwD,IAAI,EAAE,CAAC;MACCC,UAAU,EAAE;IADb,CAAD;EAF4G,CAAD,CAA7H,EAK4B,YAAY;IAAE,OAAO,EAAP;EAAY,CALtD;AAAA;AAOA;AACA;AACA;;;AAEA,SAASd,oBAAT"},"metadata":{},"sourceType":"module"}