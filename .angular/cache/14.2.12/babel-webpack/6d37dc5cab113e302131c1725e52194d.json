{"ast":null,"code":"import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\n\nfunction getMatInputUnsupportedTypeError(type) {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\n\n\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR'); // Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\n\nconst MAT_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'range', 'reset', 'submit'];\nlet nextUniqueId = 0; // Boilerplate for applying mixins to MatInput.\n\n/** @docs-private */\n\nconst _MatInputBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /**\n   * Form control bound to the component.\n   * Implemented as part of `MatFormFieldControl`.\n   * @docs-private\n   */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n  }\n\n});\n\nclass MatInput extends _MatInputBase {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value); // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get id() {\n    return this._id;\n  }\n\n  set id(value) {\n    this._id = value || this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n  }\n  /** Input type of the element. */\n\n\n  get type() {\n    return this._type;\n  }\n\n  set type(value) {\n    this._type = value || 'text';\n\n    this._validateType(); // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n\n\n    if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n      this._elementRef.nativeElement.type = this._type;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get value() {\n    return this._inputValueAccessor.value;\n  }\n\n  set value(value) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n  /** Whether the element is readonly. */\n\n\n  get readonly() {\n    return this._readonly;\n  }\n\n  set readonly(value) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n\n  constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, // TODO: Remove this once the legacy appearance has been removed. We only need\n  // to inject the form field for determining whether the placeholder has been promoted.\n  _formField) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._platform = _platform;\n    this._autofillMonitor = _autofillMonitor;\n    this._formField = _formField;\n    this._uid = `mat-input-${nextUniqueId++}`;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.focused = false;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.stateChanges = new Subject();\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.controlType = 'mat-input';\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.autofilled = false;\n    this._disabled = false;\n    this._type = 'text';\n    this._readonly = false;\n    this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(t => getSupportedInputTypes().has(t));\n\n    this._iOSKeyupListener = event => {\n      const el = event.target; // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n      // indicate different things. If the value is 0, it means that the caret is at the start\n      // of the input, whereas a value of `null` means that the input doesn't support\n      // manipulating the selection range. Inputs that don't support setting the selection range\n      // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n      // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n\n      if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n        // `1, 1` fixes it for the first time that you type text and\n        // then hold delete. Toggling to `1, 1` and then back to\n        // `0, 0` seems to completely fix it.\n        el.setSelectionRange(1, 1);\n        el.setSelectionRange(0, 0);\n      }\n    };\n\n    const element = this._elementRef.nativeElement;\n    const nodeName = element.nodeName.toLowerCase(); // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n\n    this._inputValueAccessor = inputValueAccessor || element;\n    this._previousNativeValue = this.value; // Force setter to be called in case id was not specified.\n\n    this.id = this.id; // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = nodeName === 'select';\n    this._isTextarea = nodeName === 'textarea';\n    this._isInFormField = !!_formField;\n\n    if (this._isNativeSelect) {\n      this.controlType = element.multiple ? 'mat-native-select-multiple' : 'mat-native-select';\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n\n    if (this._platform.IOS) {\n      this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState(); // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n      // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n      // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n      // disabled.\n\n      if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n        this.disabled = this.ngControl.disabled;\n        this.stateChanges.next();\n      }\n    } // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n\n\n    this._dirtyCheckNativeValue(); // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n    // present or not depends on a query which is prone to \"changed after checked\" errors.\n\n\n    this._dirtyCheckPlaceholder();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this._elementRef.nativeElement.focus(options);\n  }\n  /** Callback for the cases where the focused state of the input changes. */\n\n\n  _focusChanged(isFocused) {\n    if (isFocused !== this.focused) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {// This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n  /** Does some manual dirty checking on the native input `value` property. */\n\n\n  _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n  /** Does some manual dirty checking on the native input `placeholder` attribute. */\n\n\n  _dirtyCheckPlaceholder() {\n    const placeholder = this._getPlaceholder();\n\n    if (placeholder !== this._previousPlaceholder) {\n      const element = this._elementRef.nativeElement;\n      this._previousPlaceholder = placeholder;\n      placeholder ? element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n    }\n  }\n  /** Gets the current placeholder of the form field. */\n\n\n  _getPlaceholder() {\n    return this.placeholder || null;\n  }\n  /** Make sure the input is a supported type. */\n\n\n  _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n  /** Checks whether the input type is one of the types that are never empty. */\n\n\n  _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n  /** Checks whether the input is invalid based on the native validation. */\n\n\n  _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = this._elementRef.nativeElement.validity;\n    return validity && validity.badInput;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get empty() {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement;\n      const firstOption = selectElement.options[0]; // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n      // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n\n      return this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    if (ids.length) {\n      this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n    } else {\n      this._elementRef.nativeElement.removeAttribute('aria-describedby');\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n  /** Whether the form control is a native select that is displayed inline. */\n\n\n  _isInlineSelect() {\n    const element = this._elementRef.nativeElement;\n    return this._isNativeSelect && (element.multiple || element.size > 1);\n  }\n\n  static #_ = this.ɵfac = function MatInput_Factory(t) {\n    return new (t || MatInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.NgControl, 10), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), i0.ɵɵdirectiveInject(i4.AutofillMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8));\n  };\n  static #_2 = this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MatInput,\n    selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]],\n    hostAttrs: [1, \"mat-mdc-input-element\"],\n    hostVars: 18,\n    hostBindings: function MatInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() {\n          return ctx._focusChanged(true);\n        })(\"blur\", function MatInput_blur_HostBindingHandler() {\n          return ctx._focusChanged(false);\n        })(\"input\", function MatInput_input_HostBindingHandler() {\n          return ctx._onInput();\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵhostProperty(\"id\", ctx.id)(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        i0.ɵɵattribute(\"name\", ctx.name || null)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.empty && ctx.required ? null : ctx.errorState)(\"aria-required\", ctx.required)(\"id\", ctx.id);\n        i0.ɵɵclassProp(\"mat-input-server\", ctx._isServer)(\"mat-mdc-form-field-textarea-control\", ctx._isInFormField && ctx._isTextarea)(\"mat-mdc-form-field-input-control\", ctx._isInFormField)(\"mdc-text-field__input\", ctx._isInFormField)(\"mat-mdc-native-select-inline\", ctx._isInlineSelect());\n      }\n    },\n    inputs: {\n      disabled: \"disabled\",\n      id: \"id\",\n      placeholder: \"placeholder\",\n      name: \"name\",\n      required: \"required\",\n      type: \"type\",\n      errorStateMatcher: \"errorStateMatcher\",\n      userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"],\n      value: \"value\",\n      readonly: \"readonly\"\n    },\n    exportAs: [\"matInput\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: MatFormFieldControl,\n      useExisting: MatInput\n    }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInput, [{\n    type: Directive,\n    args: [{\n      selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n      exportAs: 'matInput',\n      host: {\n        'class': 'mat-mdc-input-element',\n        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n        // this MDC equivalent input.\n        '[class.mat-input-server]': '_isServer',\n        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n        '[class.mdc-text-field__input]': '_isInFormField',\n        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[id]': 'id',\n        '[disabled]': 'disabled',\n        '[required]': 'required',\n        '[attr.name]': 'name || null',\n        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n        // Only mark the input as invalid for assistive technology if it has a value since the\n        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n        '[attr.aria-required]': 'required',\n        // Native input properties that are overwritten by Angular inputs need to be synced with\n        // the native input element. Otherwise property bindings for those don't work.\n        '[attr.id]': 'id',\n        '(focus)': '_focusChanged(true)',\n        '(blur)': '_focusChanged(false)',\n        '(input)': '_onInput()'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatInput\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i1.Platform\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [MAT_INPUT_VALUE_ACCESSOR]\n      }]\n    }, {\n      type: i4.AutofillMonitor\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i5.MatFormField,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_FORM_FIELD]\n      }]\n    }];\n  }, {\n    disabled: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    type: [{\n      type: Input\n    }],\n    errorStateMatcher: [{\n      type: Input\n    }],\n    userAriaDescribedBy: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    value: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }]\n  });\n})();\n\nclass MatInputModule {\n  static #_ = this.ɵfac = function MatInputModule_Factory(t) {\n    return new (t || MatInputModule)();\n  };\n  static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MatInputModule\n  });\n  static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule]\n  });\n}\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatInputModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule, MatFormFieldModule],\n      exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n      declarations: [MatInput]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };","map":{"version":3,"names":["coerceBooleanProperty","i1","getSupportedInputTypes","i4","TextFieldModule","i0","InjectionToken","Directive","Optional","Self","Inject","Input","NgModule","i2","Validators","i3","mixinErrorState","MatCommonModule","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","Subject","getMatInputUnsupportedTypeError","type","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","_MatInputBase","constructor","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","stateChanges","MatInput","disabled","_disabled","value","focused","next","id","_id","_uid","required","_required","control","hasValidator","_type","_validateType","_isTextarea","has","_elementRef","nativeElement","_inputValueAccessor","readonly","_readonly","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","controlType","autofilled","_neverEmptyInputTypes","filter","t","_iOSKeyupListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","element","nodeName","toLowerCase","_previousNativeValue","IOS","runOutsideAngular","addEventListener","_isServer","isBrowser","_isNativeSelect","_isInFormField","multiple","ngAfterViewInit","monitor","subscribe","isAutofilled","ngOnChanges","ngOnDestroy","complete","stopMonitoring","removeEventListener","ngDoCheck","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","placeholder","_getPlaceholder","_previousPlaceholder","setAttribute","removeAttribute","indexOf","ngDevMode","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","ɵfac","ElementRef","Platform","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","AutofillMonitor","NgZone","ɵdir","provide","useExisting","args","selector","exportAs","host","providers","decorators","undefined","MatFormField","name","errorStateMatcher","userAriaDescribedBy","MatInputModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["C:/selise/twitter/node_modules/@angular/material/fesm2022/input.mjs"],"sourcesContent":["import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { mixinErrorState, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nconst _MatInputBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /**\n     * Form control bound to the component.\n     * Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n        /**\n         * Emits whenever the component state changes and should cause the parent\n         * form field to update. Implemented as part of `MatFormFieldControl`.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n    }\n});\nclass MatInput extends _MatInputBase {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    constructor(_elementRef, _platform, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatInput, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInputModule, declarations: [MatInput], imports: [MatCommonModule, MatFormFieldModule], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                    declarations: [MatInput],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}