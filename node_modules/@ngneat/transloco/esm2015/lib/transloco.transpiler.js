/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.transpiler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, InjectionToken, Injector, Optional } from '@angular/core';
import { getValue, isDefined, isObject, isString, setValue } from './helpers';
import { defaultConfig, TRANSLOCO_CONFIG } from './transloco.config';
/** @type {?} */
export const TRANSLOCO_TRANSPILER = new InjectionToken('TRANSLOCO_TRANSPILER');
/**
 * @record
 */
export function TranslocoTranspiler() { }
if (false) {
    /**
     * @param {?} value
     * @param {?} params
     * @param {?} translation
     * @return {?}
     */
    TranslocoTranspiler.prototype.transpile = function (value, params, translation) { };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslocoTranspiler.prototype.onLangChanged = function (lang) { };
}
export class DefaultTranspiler {
    /**
     * @param {?=} userConfig
     */
    constructor(userConfig) {
        this.interpolationMatcher = resolveMatcher(userConfig);
    }
    /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    transpile(value, params = {}, translation) {
        if (isString(value)) {
            return value.replace(this.interpolationMatcher, (/**
             * @param {?} _
             * @param {?} match
             * @return {?}
             */
            (_, match) => {
                match = match.trim();
                if (isDefined(params[match])) {
                    return params[match];
                }
                return isDefined(translation[match]) ? this.transpile(translation[match], params, translation) : '';
            }));
        }
        else if (params) {
            if (isObject(value)) {
                value = this.handleObject(value, params, translation);
            }
            else if (Array.isArray(value)) {
                value = this.handleArray(value, params, translation);
            }
        }
        return value;
    }
    /**
     *
     * \@example
     *
     * const en = {
     *  a: {
     *    b: {
     *      c: "Hello {{ value }}"
     *    }
     *  }
     * }
     *
     * const params =  {
     *  "b.c": { value: "Transloco "}
     * }
     *
     * service.selectTranslate('a', params);
     *
     * // the first param will be the result of `en.a`.
     * // the second param will be `params`.
     * parser.transpile(value, params, {});
     *
     *
     * @protected
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    handleObject(value, params = {}, translation) {
        /** @type {?} */
        let result = value;
        Object.keys(params).forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            // get the value of "b.c" inside "a" => "Hello {{ value }}"
            /** @type {?} */
            const v = getValue(result, p);
            // get the params of "b.c" => { value: "Transloco" }
            /** @type {?} */
            const getParams = getValue(params, p);
            // transpile the value => "Hello Transloco"
            /** @type {?} */
            const transpiled = this.transpile(v, getParams, translation);
            // set "b.c" to `transpiled`
            result = setValue(result, p, transpiled);
        }));
        return result;
    }
    /**
     * @protected
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    handleArray(value, params = {}, translation) {
        return value.map((/**
         * @param {?} v
         * @return {?}
         */
        v => this.transpile(v, params, translation)));
    }
}
/** @nocollapse */
DefaultTranspiler.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    DefaultTranspiler.prototype.interpolationMatcher;
}
/**
 * @param {?=} userConfig
 * @return {?}
 */
function resolveMatcher(userConfig) {
    const [start, end] = userConfig && userConfig.interpolation ? userConfig.interpolation : defaultConfig.interpolation;
    return new RegExp(`${start}(.*?)${end}`, 'g');
}
/**
 * @record
 */
export function TranslocoTranspilerFunction() { }
if (false) {
    /**
     * @param {...?} args
     * @return {?}
     */
    TranslocoTranspilerFunction.prototype.transpile = function (args) { };
}
/**
 * @param {?} argsString
 * @return {?}
 */
export function getFunctionArgs(argsString) {
    /** @type {?} */
    const splitted = argsString ? argsString.split(',') : [];
    /** @type {?} */
    const args = [];
    for (let i = 0; i < splitted.length; i++) {
        /** @type {?} */
        let value = splitted[i].trim();
        while (value[value.length - 1] === '\\') {
            i++;
            value = value.replace('\\', ',') + splitted[i];
        }
        args.push(value);
    }
    return args;
}
export class FunctionalTranspiler extends DefaultTranspiler {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        super();
        this.injector = injector;
    }
    /**
     * @param {?} value
     * @param {?=} params
     * @param {?=} translation
     * @return {?}
     */
    transpile(value, params = {}, translation) {
        /** @type {?} */
        let transpiled = value;
        if (isString(value)) {
            transpiled = value.replace(/\[\[\s*(\w+)\((.*)\)\s*]]/g, (/**
             * @param {?} match
             * @param {?} functionName
             * @param {?} args
             * @return {?}
             */
            (match, functionName, args) => {
                try {
                    /** @type {?} */
                    const func = this.injector.get(functionName);
                    return func.transpile(...getFunctionArgs(args));
                }
                catch (e) {
                    /** @type {?} */
                    let message = `There is an error in: '${value}'. 
                          Check that the you used the right syntax in your translation and that the implementation of ${functionName} is correct.`;
                    if (e.message.includes('NullInjectorError')) {
                        message = `You are using the '${functionName}' function in your translation but no provider was found!`;
                    }
                    throw new Error(message);
                }
            }));
        }
        return super.transpile(transpiled, params, translation);
    }
}
FunctionalTranspiler.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FunctionalTranspiler.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FunctionalTranspiler.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,