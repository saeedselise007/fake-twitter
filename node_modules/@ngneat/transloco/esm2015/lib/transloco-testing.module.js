/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-testing.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { APP_INITIALIZER, Inject, Injectable, InjectionToken, NgModule } from '@angular/core';
import { TRANSLOCO_LOADER } from './transloco.loader';
import { of } from 'rxjs';
import { defaultProviders, TranslocoModule } from './transloco.module';
import { TRANSLOCO_CONFIG, translocoConfig } from './transloco.config';
import { TranslocoService } from './transloco.service';
/**
 * @record
 */
export function TranslocoTestingOptions() { }
if (false) {
    /** @type {?|undefined} */
    TranslocoTestingOptions.prototype.translocoConfig;
    /** @type {?|undefined} */
    TranslocoTestingOptions.prototype.preloadLangs;
    /** @type {?|undefined} */
    TranslocoTestingOptions.prototype.langs;
}
/** @type {?} */
const TRANSLOCO_TEST_LANGS = new InjectionToken('TRANSLOCO_TEST_LANGS - Available testing languages');
/** @type {?} */
const TRANSLOCO_TEST_OPTIONS = new InjectionToken('TRANSLOCO_TEST_OPTIONS - Testing options');
export class TestingLoader {
    /**
     * @param {?} langs
     */
    constructor(langs) {
        this.langs = langs;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getTranslation(lang) {
        return of(this.langs[lang]);
    }
}
TestingLoader.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TestingLoader.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [TRANSLOCO_TEST_LANGS,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TestingLoader.prototype.langs;
}
/**
 * @param {?} service
 * @param {?=} langs
 * @param {?=} options
 * @return {?}
 */
export function initTranslocoService(service, langs = {}, options) {
    /** @type {?} */
    const preloadAllLangs = (/**
     * @return {?}
     */
    () => options.preloadLangs
        ? Promise.all(Object.keys(langs).map((/**
         * @param {?} lang
         * @return {?}
         */
        lang => service.load(lang).toPromise())))
        : Promise.resolve());
    return preloadAllLangs;
}
export class TranslocoTestingModule {
    /**
     * @param {?} options
     * @return {?}
     */
    static forRoot(options) {
        return {
            ngModule: TranslocoTestingModule,
            providers: [
                {
                    provide: TRANSLOCO_TEST_LANGS,
                    useValue: options.langs
                },
                {
                    provide: TRANSLOCO_TEST_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initTranslocoService,
                    deps: [TranslocoService, TRANSLOCO_TEST_LANGS, TRANSLOCO_TEST_OPTIONS],
                    multi: true
                },
                {
                    provide: TRANSLOCO_LOADER,
                    useClass: TestingLoader
                },
                defaultProviders,
                {
                    provide: TRANSLOCO_CONFIG,
                    useValue: translocoConfig(Object.assign({ prodMode: true, missingHandler: { logMissingKey: false } }, options.translocoConfig))
                }
            ]
        };
    }
    /**
     * @deprecated - use forRoot instead
     * @param {?} langs
     * @param {?=} config
     * @param {?=} options
     * @return {?}
     */
    static withLangs(langs, config = {}, options = {}) {
        return {
            ngModule: TranslocoTestingModule,
            providers: [
                {
                    provide: TRANSLOCO_TEST_LANGS,
                    useValue: langs
                },
                {
                    provide: TRANSLOCO_TEST_OPTIONS,
                    useValue: options
                },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initTranslocoService,
                    deps: [TranslocoService, TRANSLOCO_TEST_LANGS, TRANSLOCO_TEST_OPTIONS],
                    multi: true
                },
                {
                    provide: TRANSLOCO_LOADER,
                    useClass: TestingLoader
                },
                defaultProviders,
                {
                    provide: TRANSLOCO_CONFIG,
                    useValue: translocoConfig(Object.assign({ prodMode: true, missingHandler: { logMissingKey: false } }, config))
                }
            ]
        };
    }
}
TranslocoTestingModule.decorators = [
    { type: NgModule, args: [{
                exports: [TranslocoModule]
            },] }
];
//# sourceMappingURL=data:application/json;base64,