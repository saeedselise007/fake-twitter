/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    () => {
        return {};
    })
});
/** @type {?} */
export const defaultConfig = {
    defaultLang: 'en',
    reRenderOnLangChange: false,
    prodMode: false,
    failedRetries: 2,
    availableLangs: [],
    missingHandler: {
        logMissingKey: true,
        useFallbackTranslation: false,
        allowEmpty: false
    },
    flatten: {
        aot: false
    },
    interpolation: ['{{', '}}']
};
/**
 * @deprecated
 * @param {?=} config
 * @return {?}
 */
export function provideTranslocoConfig(config = defaultConfig) {
    return {
        provide: TRANSLOCO_CONFIG,
        useValue: Object.assign({}, defaultConfig, config)
    };
}
/**
 * Sets up TranslocoConfig object.
 *
 * @param {?=} config The partial config object to load, this is optional,
 * will be spread after defaultConfig.
 * @return {?}
 */
export function translocoConfig(config = defaultConfig) {
    return Object.assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFZLE1BQU0sZUFBZSxDQUFDOztBQXVCekQsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixFQUFFO0lBQ3JFLFVBQVUsRUFBRSxNQUFNO0lBQ2xCLE9BQU87OztJQUFFLEdBQUcsRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFBO0NBQ0YsQ0FBQzs7QUFFRixNQUFNLE9BQU8sYUFBYSxHQUFvQjtJQUM1QyxXQUFXLEVBQUUsSUFBSTtJQUNqQixvQkFBb0IsRUFBRSxLQUFLO0lBQzNCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsYUFBYSxFQUFFLENBQUM7SUFDaEIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsY0FBYyxFQUFFO1FBQ2QsYUFBYSxFQUFFLElBQUk7UUFDbkIsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixVQUFVLEVBQUUsS0FBSztLQUNsQjtJQUNELE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxLQUFLO0tBQ1g7SUFDRCxhQUFhLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQzVCOzs7Ozs7QUFLRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsU0FBbUMsYUFBYTtJQUNyRixPQUFPO1FBQ0wsT0FBTyxFQUFFLGdCQUFnQjtRQUN6QixRQUFRLG9CQUFPLGFBQWEsRUFBSyxNQUFNLENBQUU7S0FDMUMsQ0FBQztBQUNKLENBQUM7Ozs7Ozs7O0FBUUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxTQUFtQyxhQUFhO0lBQzlFLHlCQUFZLGFBQWEsRUFBSyxNQUFNLEVBQUc7QUFDekMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQXZhaWxhYmxlTGFuZ3MsIEhhc2hNYXAgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHR5cGUgVHJhbnNsb2NvQ29uZmlnID0ge1xuICBkZWZhdWx0TGFuZzogc3RyaW5nO1xuICByZVJlbmRlck9uTGFuZ0NoYW5nZT86IGJvb2xlYW47XG4gIHByb2RNb2RlPzogYm9vbGVhbjtcbiAgZmFsbGJhY2tMYW5nPzogc3RyaW5nIHwgc3RyaW5nW107XG4gIGZhaWxlZFJldHJpZXM/OiBudW1iZXI7XG4gIC8qKiBAZGVwcmVjYXRlZCAqL1xuICBzY29wZU1hcHBpbmc/OiBIYXNoTWFwPHN0cmluZz47XG4gIGF2YWlsYWJsZUxhbmdzPzogQXZhaWxhYmxlTGFuZ3M7XG4gIGZsYXR0ZW4/OiB7XG4gICAgYW90PzogYm9vbGVhbjtcbiAgfTtcbiAgbWlzc2luZ0hhbmRsZXI/OiB7XG4gICAgbG9nTWlzc2luZ0tleT86IGJvb2xlYW47XG4gICAgdXNlRmFsbGJhY2tUcmFuc2xhdGlvbj86IGJvb2xlYW47XG4gICAgYWxsb3dFbXB0eT86IGJvb2xlYW47XG4gIH07XG4gIGludGVycG9sYXRpb24/OiBbc3RyaW5nLCBzdHJpbmddO1xufTtcblxuZXhwb3J0IGNvbnN0IFRSQU5TTE9DT19DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1RSQU5TTE9DT19DT05GSUcnLCB7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgZmFjdG9yeTogKCkgPT4ge1xuICAgIHJldHVybiB7fTtcbiAgfVxufSk7XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29uZmlnOiBUcmFuc2xvY29Db25maWcgPSB7XG4gIGRlZmF1bHRMYW5nOiAnZW4nLFxuICByZVJlbmRlck9uTGFuZ0NoYW5nZTogZmFsc2UsXG4gIHByb2RNb2RlOiBmYWxzZSxcbiAgZmFpbGVkUmV0cmllczogMixcbiAgYXZhaWxhYmxlTGFuZ3M6IFtdLFxuICBtaXNzaW5nSGFuZGxlcjoge1xuICAgIGxvZ01pc3NpbmdLZXk6IHRydWUsXG4gICAgdXNlRmFsbGJhY2tUcmFuc2xhdGlvbjogZmFsc2UsXG4gICAgYWxsb3dFbXB0eTogZmFsc2VcbiAgfSxcbiAgZmxhdHRlbjoge1xuICAgIGFvdDogZmFsc2VcbiAgfSxcbiAgaW50ZXJwb2xhdGlvbjogWyd7eycsICd9fSddXG59O1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlVHJhbnNsb2NvQ29uZmlnKGNvbmZpZzogUGFydGlhbDxUcmFuc2xvY29Db25maWc+ID0gZGVmYXVsdENvbmZpZyk6IFByb3ZpZGVyIHtcbiAgcmV0dXJuIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fQ09ORklHLFxuICAgIHVzZVZhbHVlOiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9XG4gIH07XG59XG5cbi8qKlxuICogU2V0cyB1cCBUcmFuc2xvY29Db25maWcgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSBjb25maWcgVGhlIHBhcnRpYWwgY29uZmlnIG9iamVjdCB0byBsb2FkLCB0aGlzIGlzIG9wdGlvbmFsLFxuICogd2lsbCBiZSBzcHJlYWQgYWZ0ZXIgZGVmYXVsdENvbmZpZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbG9jb0NvbmZpZyhjb25maWc6IFBhcnRpYWw8VHJhbnNsb2NvQ29uZmlnPiA9IGRlZmF1bHRDb25maWcpOiBUcmFuc2xvY29Db25maWcge1xuICByZXR1cm4geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfTtcbn1cbiJdfQ==