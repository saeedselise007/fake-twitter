/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { TranslocoLoaderComponent } from './loader-component.component';
import { TranslocoDirective } from './transloco.directive';
import { DefaultTranspiler, TRANSLOCO_TRANSPILER } from './transloco.transpiler';
import { TranslocoPipe } from './transloco.pipe';
import { DefaultHandler, TRANSLOCO_MISSING_HANDLER } from './transloco-missing-handler';
import { DefaultInterceptor, TRANSLOCO_INTERCEPTOR } from './transloco.interceptor';
import { DefaultFallbackStrategy, TRANSLOCO_FALLBACK_STRATEGY } from './transloco-fallback-strategy';
import { TRANSLOCO_CONFIG } from './transloco.config';
/** @type {?} */
export const defaultProviders = [
    {
        provide: TRANSLOCO_TRANSPILER,
        useClass: DefaultTranspiler,
        deps: [TRANSLOCO_CONFIG]
    },
    {
        provide: TRANSLOCO_MISSING_HANDLER,
        useClass: DefaultHandler
    },
    {
        provide: TRANSLOCO_INTERCEPTOR,
        useClass: DefaultInterceptor
    },
    {
        provide: TRANSLOCO_FALLBACK_STRATEGY,
        useClass: DefaultFallbackStrategy,
        deps: [TRANSLOCO_CONFIG]
    }
];
export class TranslocoModule {
}
TranslocoModule.decorators = [
    { type: NgModule, args: [{
                declarations: [TranslocoDirective, TranslocoPipe, TranslocoLoaderComponent],
                providers: [defaultProviders],
                exports: [TranslocoDirective, TranslocoPipe],
                entryComponents: [TranslocoLoaderComponent]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsY0FBYyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDckcsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBRXRELE1BQU0sT0FBTyxnQkFBZ0IsR0FBRztJQUM5QjtRQUNFLE9BQU8sRUFBRSxvQkFBb0I7UUFDN0IsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztLQUN6QjtJQUNEO1FBQ0UsT0FBTyxFQUFFLHlCQUF5QjtRQUNsQyxRQUFRLEVBQUUsY0FBYztLQUN6QjtJQUNEO1FBQ0UsT0FBTyxFQUFFLHFCQUFxQjtRQUM5QixRQUFRLEVBQUUsa0JBQWtCO0tBQzdCO0lBQ0Q7UUFDRSxPQUFPLEVBQUUsMkJBQTJCO1FBQ3BDLFFBQVEsRUFBRSx1QkFBdUI7UUFDakMsSUFBSSxFQUFFLENBQUMsZ0JBQWdCLENBQUM7S0FDekI7Q0FDRjtBQVFELE1BQU0sT0FBTyxlQUFlOzs7WUFOM0IsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRSxDQUFDLGtCQUFrQixFQUFFLGFBQWEsRUFBRSx3QkFBd0IsQ0FBQztnQkFDM0UsU0FBUyxFQUFFLENBQUMsZ0JBQWdCLENBQUM7Z0JBQzdCLE9BQU8sRUFBRSxDQUFDLGtCQUFrQixFQUFFLGFBQWEsQ0FBQztnQkFDNUMsZUFBZSxFQUFFLENBQUMsd0JBQXdCLENBQUM7YUFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJhbnNsb2NvTG9hZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9sb2FkZXItY29tcG9uZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUcmFuc2xvY29EaXJlY3RpdmUgfSBmcm9tICcuL3RyYW5zbG9jby5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRGVmYXVsdFRyYW5zcGlsZXIsIFRSQU5TTE9DT19UUkFOU1BJTEVSIH0gZnJvbSAnLi90cmFuc2xvY28udHJhbnNwaWxlcic7XG5pbXBvcnQgeyBUcmFuc2xvY29QaXBlIH0gZnJvbSAnLi90cmFuc2xvY28ucGlwZSc7XG5pbXBvcnQgeyBEZWZhdWx0SGFuZGxlciwgVFJBTlNMT0NPX01JU1NJTkdfSEFORExFUiB9IGZyb20gJy4vdHJhbnNsb2NvLW1pc3NpbmctaGFuZGxlcic7XG5pbXBvcnQgeyBEZWZhdWx0SW50ZXJjZXB0b3IsIFRSQU5TTE9DT19JTlRFUkNFUFRPUiB9IGZyb20gJy4vdHJhbnNsb2NvLmludGVyY2VwdG9yJztcbmltcG9ydCB7IERlZmF1bHRGYWxsYmFja1N0cmF0ZWd5LCBUUkFOU0xPQ09fRkFMTEJBQ0tfU1RSQVRFR1kgfSBmcm9tICcuL3RyYW5zbG9jby1mYWxsYmFjay1zdHJhdGVneSc7XG5pbXBvcnQgeyBUUkFOU0xPQ09fQ09ORklHIH0gZnJvbSAnLi90cmFuc2xvY28uY29uZmlnJztcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRQcm92aWRlcnMgPSBbXG4gIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fVFJBTlNQSUxFUixcbiAgICB1c2VDbGFzczogRGVmYXVsdFRyYW5zcGlsZXIsXG4gICAgZGVwczogW1RSQU5TTE9DT19DT05GSUddXG4gIH0sXG4gIHtcbiAgICBwcm92aWRlOiBUUkFOU0xPQ09fTUlTU0lOR19IQU5ETEVSLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0SGFuZGxlclxuICB9LFxuICB7XG4gICAgcHJvdmlkZTogVFJBTlNMT0NPX0lOVEVSQ0VQVE9SLFxuICAgIHVzZUNsYXNzOiBEZWZhdWx0SW50ZXJjZXB0b3JcbiAgfSxcbiAge1xuICAgIHByb3ZpZGU6IFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSxcbiAgICB1c2VDbGFzczogRGVmYXVsdEZhbGxiYWNrU3RyYXRlZ3ksXG4gICAgZGVwczogW1RSQU5TTE9DT19DT05GSUddXG4gIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1RyYW5zbG9jb0RpcmVjdGl2ZSwgVHJhbnNsb2NvUGlwZSwgVHJhbnNsb2NvTG9hZGVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbZGVmYXVsdFByb3ZpZGVyc10sXG4gIGV4cG9ydHM6IFtUcmFuc2xvY29EaXJlY3RpdmUsIFRyYW5zbG9jb1BpcGVdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtUcmFuc2xvY29Mb2FkZXJDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbG9jb01vZHVsZSB7fVxuIl19