/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { InjectionToken } from '@angular/core';
/** @type {?} */
export var TRANSLOCO_CONFIG = new InjectionToken('TRANSLOCO_CONFIG', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    function () {
        return {};
    })
});
/** @type {?} */
export var defaultConfig = {
    defaultLang: 'en',
    reRenderOnLangChange: false,
    prodMode: false,
    failedRetries: 2,
    availableLangs: [],
    missingHandler: {
        logMissingKey: true,
        useFallbackTranslation: false,
        allowEmpty: false
    },
    flatten: {
        aot: false
    },
    interpolation: ['{{', '}}']
};
/**
 * @deprecated
 * @param {?=} config
 * @return {?}
 */
export function provideTranslocoConfig(config) {
    if (config === void 0) { config = defaultConfig; }
    return {
        provide: TRANSLOCO_CONFIG,
        useValue: tslib_1.__assign({}, defaultConfig, config)
    };
}
/**
 * Sets up TranslocoConfig object.
 *
 * @param {?=} config The partial config object to load, this is optional,
 * will be spread after defaultConfig.
 * @return {?}
 */
export function translocoConfig(config) {
    if (config === void 0) { config = defaultConfig; }
    return tslib_1.__assign({}, defaultConfig, config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLmNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBWSxNQUFNLGVBQWUsQ0FBQzs7QUF1QnpELE1BQU0sS0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FBQyxrQkFBa0IsRUFBRTtJQUNyRSxVQUFVLEVBQUUsTUFBTTtJQUNsQixPQUFPOzs7SUFBRTtRQUNQLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQyxDQUFBO0NBQ0YsQ0FBQzs7QUFFRixNQUFNLEtBQU8sYUFBYSxHQUFvQjtJQUM1QyxXQUFXLEVBQUUsSUFBSTtJQUNqQixvQkFBb0IsRUFBRSxLQUFLO0lBQzNCLFFBQVEsRUFBRSxLQUFLO0lBQ2YsYUFBYSxFQUFFLENBQUM7SUFDaEIsY0FBYyxFQUFFLEVBQUU7SUFDbEIsY0FBYyxFQUFFO1FBQ2QsYUFBYSxFQUFFLElBQUk7UUFDbkIsc0JBQXNCLEVBQUUsS0FBSztRQUM3QixVQUFVLEVBQUUsS0FBSztLQUNsQjtJQUNELE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRSxLQUFLO0tBQ1g7SUFDRCxhQUFhLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO0NBQzVCOzs7Ozs7QUFLRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsTUFBZ0Q7SUFBaEQsdUJBQUEsRUFBQSxzQkFBZ0Q7SUFDckYsT0FBTztRQUNMLE9BQU8sRUFBRSxnQkFBZ0I7UUFDekIsUUFBUSx1QkFBTyxhQUFhLEVBQUssTUFBTSxDQUFFO0tBQzFDLENBQUM7QUFDSixDQUFDOzs7Ozs7OztBQVFELE1BQU0sVUFBVSxlQUFlLENBQUMsTUFBZ0Q7SUFBaEQsdUJBQUEsRUFBQSxzQkFBZ0Q7SUFDOUUsNEJBQVksYUFBYSxFQUFLLE1BQU0sRUFBRztBQUN6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdmFpbGFibGVMYW5ncywgSGFzaE1hcCB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBUcmFuc2xvY29Db25maWcgPSB7XG4gIGRlZmF1bHRMYW5nOiBzdHJpbmc7XG4gIHJlUmVuZGVyT25MYW5nQ2hhbmdlPzogYm9vbGVhbjtcbiAgcHJvZE1vZGU/OiBib29sZWFuO1xuICBmYWxsYmFja0xhbmc/OiBzdHJpbmcgfCBzdHJpbmdbXTtcbiAgZmFpbGVkUmV0cmllcz86IG51bWJlcjtcbiAgLyoqIEBkZXByZWNhdGVkICovXG4gIHNjb3BlTWFwcGluZz86IEhhc2hNYXA8c3RyaW5nPjtcbiAgYXZhaWxhYmxlTGFuZ3M/OiBBdmFpbGFibGVMYW5ncztcbiAgZmxhdHRlbj86IHtcbiAgICBhb3Q/OiBib29sZWFuO1xuICB9O1xuICBtaXNzaW5nSGFuZGxlcj86IHtcbiAgICBsb2dNaXNzaW5nS2V5PzogYm9vbGVhbjtcbiAgICB1c2VGYWxsYmFja1RyYW5zbGF0aW9uPzogYm9vbGVhbjtcbiAgICBhbGxvd0VtcHR5PzogYm9vbGVhbjtcbiAgfTtcbiAgaW50ZXJwb2xhdGlvbj86IFtzdHJpbmcsIHN0cmluZ107XG59O1xuXG5leHBvcnQgY29uc3QgVFJBTlNMT0NPX0NPTkZJRyA9IG5ldyBJbmplY3Rpb25Ub2tlbignVFJBTlNMT0NPX0NPTkZJRycsIHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICBmYWN0b3J5OiAoKSA9PiB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRDb25maWc6IFRyYW5zbG9jb0NvbmZpZyA9IHtcbiAgZGVmYXVsdExhbmc6ICdlbicsXG4gIHJlUmVuZGVyT25MYW5nQ2hhbmdlOiBmYWxzZSxcbiAgcHJvZE1vZGU6IGZhbHNlLFxuICBmYWlsZWRSZXRyaWVzOiAyLFxuICBhdmFpbGFibGVMYW5nczogW10sXG4gIG1pc3NpbmdIYW5kbGVyOiB7XG4gICAgbG9nTWlzc2luZ0tleTogdHJ1ZSxcbiAgICB1c2VGYWxsYmFja1RyYW5zbGF0aW9uOiBmYWxzZSxcbiAgICBhbGxvd0VtcHR5OiBmYWxzZVxuICB9LFxuICBmbGF0dGVuOiB7XG4gICAgYW90OiBmYWxzZVxuICB9LFxuICBpbnRlcnBvbGF0aW9uOiBbJ3t7JywgJ319J11cbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVUcmFuc2xvY29Db25maWcoY29uZmlnOiBQYXJ0aWFsPFRyYW5zbG9jb0NvbmZpZz4gPSBkZWZhdWx0Q29uZmlnKTogUHJvdmlkZXIge1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IFRSQU5TTE9DT19DT05GSUcsXG4gICAgdXNlVmFsdWU6IHsgLi4uZGVmYXVsdENvbmZpZywgLi4uY29uZmlnIH1cbiAgfTtcbn1cblxuLyoqXG4gKiBTZXRzIHVwIFRyYW5zbG9jb0NvbmZpZyBvYmplY3QuXG4gKlxuICogQHBhcmFtIGNvbmZpZyBUaGUgcGFydGlhbCBjb25maWcgb2JqZWN0IHRvIGxvYWQsIHRoaXMgaXMgb3B0aW9uYWwsXG4gKiB3aWxsIGJlIHNwcmVhZCBhZnRlciBkZWZhdWx0Q29uZmlnLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNsb2NvQ29uZmlnKGNvbmZpZzogUGFydGlhbDxUcmFuc2xvY29Db25maWc+ID0gZGVmYXVsdENvbmZpZyk6IFRyYW5zbG9jb0NvbmZpZyB7XG4gIHJldHVybiB7IC4uLmRlZmF1bHRDb25maWcsIC4uLmNvbmZpZyB9O1xufVxuIl19