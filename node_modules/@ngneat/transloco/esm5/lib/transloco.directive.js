/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Inject, Input, Optional, TemplateRef, ViewContainerRef } from '@angular/core';
import { forkJoin } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { TemplateHandler } from './template-handler';
import { TRANSLOCO_LANG } from './transloco-lang';
import { TRANSLOCO_LOADING_TEMPLATE } from './transloco-loading-template';
import { TRANSLOCO_SCOPE } from './transloco-scope';
import { TranslocoService } from './transloco.service';
import { listenOrNotOperator, resolveInlineLoader, shouldListenToLangChanges } from './shared';
import { LangResolver } from './lang-resolver';
import { ScopeResolver } from './scope-resolver';
var TranslocoDirective = /** @class */ (function () {
    function TranslocoDirective(translocoService, tpl, providerScope, providerLang, providedLoadingTpl, vcr, cdr, host) {
        this.translocoService = translocoService;
        this.tpl = tpl;
        this.providerScope = providerScope;
        this.providerLang = providerLang;
        this.providedLoadingTpl = providedLoadingTpl;
        this.vcr = vcr;
        this.cdr = cdr;
        this.host = host;
        this.translationMemo = {};
        this.params = {};
        this.loaderTplHandler = null;
        // Whether we already rendered the view once
        this.initialized = false;
        this.langResolver = new LangResolver();
        this.scopeResolver = new ScopeResolver(this.translocoService);
    }
    /**
     * @return {?}
     */
    TranslocoDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var listenToLangChange = shouldListenToLangChanges(this.translocoService, this.providerLang || this.inlineLang);
        this.subscription = this.translocoService.langChanges$
            .pipe(switchMap((/**
         * @param {?} activeLang
         * @return {?}
         */
        function (activeLang) {
            /** @type {?} */
            var lang = _this.langResolver.resolve({
                inline: _this.inlineLang,
                provider: _this.providerLang,
                active: activeLang
            });
            return Array.isArray(_this.providerScope)
                ? forkJoin(((/** @type {?} */ (_this.providerScope))).map((/**
                 * @param {?} providerScope
                 * @return {?}
                 */
                function (providerScope) { return _this.resolveScope(lang, providerScope); })))
                : _this.resolveScope(lang, _this.providerScope);
        })), listenOrNotOperator(listenToLangChange))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.currentLang = _this.langResolver.resolveLangBasedOnScope(_this.path);
            _this.tpl === null ? _this.simpleStrategy() : _this.structuralStrategy(_this.currentLang, _this.inlineRead);
            _this.cdr.markForCheck();
            _this.initialized = true;
        }));
        /** @type {?} */
        var loadingTpl = this.getLoadingTpl();
        if (!this.initialized && loadingTpl) {
            this.loaderTplHandler = new TemplateHandler(loadingTpl, this.vcr);
            this.loaderTplHandler.attachView();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TranslocoDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // We need to support dynamic keys/params, so if this is not the first change CD cycle
        // we need to run the function again in order to update the value
        /** @type {?} */
        var notInit = Object.keys(changes).some((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return changes[v].firstChange === false; }));
        notInit && this.simpleStrategy();
    };
    /**
     * @private
     * @return {?}
     */
    TranslocoDirective.prototype.simpleStrategy = /**
     * @private
     * @return {?}
     */
    function () {
        this.detachLoader();
        this.host.nativeElement.innerText = this.translocoService.translate(this.key, this.params, this.currentLang);
    };
    /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    TranslocoDirective.prototype.structuralStrategy = /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    function (lang, read) {
        this.translationMemo = {};
        if (this.view) {
            // when the lang changes we need to change the reference so Angular will update the view
            this.view.context['$implicit'] = this.getTranslateFn(lang, read);
        }
        else {
            this.detachLoader();
            this.view = this.vcr.createEmbeddedView(this.tpl, {
                $implicit: this.getTranslateFn(lang, read)
            });
        }
    };
    /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    TranslocoDirective.prototype.getTranslateFn = /**
     * @private
     * @param {?} lang
     * @param {?} read
     * @return {?}
     */
    function (lang, read) {
        var _this = this;
        return (/**
         * @param {?} key
         * @param {?} params
         * @return {?}
         */
        function (key, params) {
            /** @type {?} */
            var withRead = read ? read + "." + key : key;
            /** @type {?} */
            var withParams = params ? "" + withRead + JSON.stringify(params) : withRead;
            if (_this.translationMemo.hasOwnProperty(withParams)) {
                return _this.translationMemo[withParams].value;
            }
            _this.translationMemo[withParams] = {
                params: params,
                value: _this.translocoService.translate(withRead, params, lang)
            };
            return _this.translationMemo[withParams].value;
        });
    };
    /**
     * @private
     * @return {?}
     */
    TranslocoDirective.prototype.getLoadingTpl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.inlineTpl || this.providedLoadingTpl;
    };
    /**
     * @return {?}
     */
    TranslocoDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription && this.subscription.unsubscribe();
    };
    /**
     * @private
     * @return {?}
     */
    TranslocoDirective.prototype.detachLoader = /**
     * @private
     * @return {?}
     */
    function () {
        this.loaderTplHandler && this.loaderTplHandler.detachView();
    };
    /**
     * @private
     * @param {?} lang
     * @param {?} providerScope
     * @return {?}
     */
    TranslocoDirective.prototype.resolveScope = /**
     * @private
     * @param {?} lang
     * @param {?} providerScope
     * @return {?}
     */
    function (lang, providerScope) {
        /** @type {?} */
        var resolvedScope = this.scopeResolver.resolve({ inline: this.inlineScope, provider: providerScope });
        this.path = this.langResolver.resolveLangPath(lang, resolvedScope);
        /** @type {?} */
        var inlineLoader = resolveInlineLoader(providerScope, resolvedScope);
        return this.translocoService._loadDependencies(this.path, inlineLoader);
    };
    TranslocoDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[transloco]'
                },] }
    ];
    /** @nocollapse */
    TranslocoDirective.ctorParameters = function () { return [
        { type: TranslocoService },
        { type: TemplateRef, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_SCOPE,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_LANG,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [TRANSLOCO_LOADING_TEMPLATE,] }] },
        { type: ViewContainerRef },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    TranslocoDirective.propDecorators = {
        key: [{ type: Input, args: ['transloco',] }],
        params: [{ type: Input, args: ['translocoParams',] }],
        inlineScope: [{ type: Input, args: ['translocoScope',] }],
        inlineRead: [{ type: Input, args: ['translocoRead',] }],
        inlineLang: [{ type: Input, args: ['translocoLang',] }],
        inlineTpl: [{ type: Input, args: ['translocoLoadingTpl',] }]
    };
    return TranslocoDirective;
}());
export { TranslocoDirective };
if (false) {
    /** @type {?} */
    TranslocoDirective.prototype.subscription;
    /** @type {?} */
    TranslocoDirective.prototype.view;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.translationMemo;
    /** @type {?} */
    TranslocoDirective.prototype.key;
    /** @type {?} */
    TranslocoDirective.prototype.params;
    /** @type {?} */
    TranslocoDirective.prototype.inlineScope;
    /** @type {?} */
    TranslocoDirective.prototype.inlineRead;
    /** @type {?} */
    TranslocoDirective.prototype.inlineLang;
    /** @type {?} */
    TranslocoDirective.prototype.inlineTpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.currentLang;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.loaderTplHandler;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.initialized;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.path;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.langResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.scopeResolver;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.translocoService;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.tpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providerScope;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providerLang;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.providedLoadingTpl;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.vcr;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    TranslocoDirective.prototype.host;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ25lYXQvdHJhbnNsb2NvLyIsInNvdXJjZXMiOlsibGliL3RyYW5zbG9jby5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxVQUFVLEVBRVYsTUFBTSxFQUNOLEtBQUssRUFJTCxRQUFRLEVBQ1IsV0FBVyxFQUVYLGdCQUFnQixFQUNqQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsUUFBUSxFQUE0QixNQUFNLE1BQU0sQ0FBQztBQUMxRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBUSxNQUFNLG9CQUFvQixDQUFDO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLG1CQUFtQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQy9GLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFakQ7SUF1QkUsNEJBQ1UsZ0JBQWtDLEVBQ3RCLEdBQXVFLEVBQzlDLGFBQXlDLEVBQzFDLFlBQTJCLEVBQ2Ysa0JBQXNDLEVBQ3RGLEdBQXFCLEVBQ3JCLEdBQXNCLEVBQ3RCLElBQWdCO1FBUGhCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDdEIsUUFBRyxHQUFILEdBQUcsQ0FBb0U7UUFDOUMs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Q3ZFLGdEQUE4Rjs7Ozs7SUFDOUYsaUNBQTZCOzs7OztJQUM3QixpQ0FBOEI7Ozs7O0lBQzlCLGtDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEVtYmVkZGVkVmlld1JlZixcbiAgSW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3B0aW9uYWwsXG4gIFRlbXBsYXRlUmVmLFxuICBUeXBlLFxuICBWaWV3Q29udGFpbmVyUmVmXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGVtcGxhdGVIYW5kbGVyLCBWaWV3IH0gZnJvbSAnLi90ZW1wbGF0ZS1oYW5kbGVyJztcbmltcG9ydCB7IFRSQU5TTE9DT19MQU5HIH0gZnJvbSAnLi90cmFuc2xvY28tbGFuZyc7XG5pbXBvcnQgeyBUUkFOU0xPQ09fTE9BRElOR19URU1QTEFURSB9IGZyb20gJy4vdHJhbnNsb2NvLWxvYWRpbmctdGVtcGxhdGUnO1xuaW1wb3J0IHsgVFJBTlNMT0NPX1NDT1BFIH0gZnJvbSAnLi90cmFuc2xvY28tc2NvcGUnO1xuaW1wb3J0IHsgVHJhbnNsb2NvU2VydmljZSB9IGZyb20gJy4vdHJhbnNsb2NvLnNlcnZpY2UnO1xuaW1wb3J0IHsgSGFzaE1hcCwgTWF5YmVBcnJheSwgVHJhbnNsYXRpb24sIFRyYW5zbG9jb1Njb3BlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBsaXN0ZW5Pck5vdE9wZXJhdG9yLCByZXNvbHZlSW5saW5lTG9hZGVyLCBzaG91bGRMaXN0ZW5Ub0xhbmdDaGFuZ2VzIH0gZnJvbSAnLi9zaGFyZWQnO1xuaW1wb3J0IHsgTGFuZ1Jlc29sdmVyIH0gZnJvbSAnLi9sYW5nLXJlc29sdmVyJztcbmltcG9ydCB7IFNjb3BlUmVzb2x2ZXIgfSBmcm9tICcuL3Njb3BlLXJlc29sdmVyJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3RyYW5zbG9jb10nXG59KVxuZXhwb3J0IGNsYXNzIFRyYW5zbG9jb0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xuICBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiB8IG51bGw7XG4gIHZpZXc6IEVtYmVkZGVkVmlld1JlZjxhbnk+O1xuICBwcml2YXRlIHRyYW5zbGF0aW9uTWVtbzogeyBba2V5OiBzdHJpbmddOiB7IHZhbHVlOiBhbnk7IHBhcmFtczogSGFzaE1hcCB9IH0gPSB7fTtcblxuICBASW5wdXQoJ3RyYW5zbG9jbycpIGtleTogc3RyaW5nO1xuICBASW5wdXQoJ3RyYW5zbG9jb1BhcmFtcycpIHBhcmFtczogSGFzaE1hcCA9IHt9O1xuICBASW5wdXQoJ3RyYW5zbG9jb1Njb3BlJykgaW5saW5lU2NvcGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgQElucHV0KCd0cmFuc2xvY29SZWFkJykgaW5saW5lUmVhZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBASW5wdXQoJ3RyYW5zbG9jb0xhbmcnKSBpbmxpbmVMYW5nOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIEBJbnB1dCgndHJhbnNsb2NvTG9hZGluZ1RwbCcpIGlubGluZVRwbDogVGVtcGxhdGVSZWY8YW55PiB8IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIGN1cnJlbnRMYW5nOiBzdHJpbmc7XG4gIHByaXZhdGUgbG9hZGVyVHBsSGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyID0gbnVsbDtcbiAgLy8gV2hldGhlciB3ZSBhbHJlYWR5IHJlbmRlcmVkIHRoZSB2aWV3IG9uY2VcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIHBhdGg6IHN0cmluZztcbiAgcHJpdmF0ZSBsYW5nUmVzb2x2ZXIgPSBuZXcgTGFuZ1Jlc29sdmVyKCk7XG4gIHByaXZhdGUgc2NvcGVSZXNvbHZlciA9IG5ldyBTY29wZVJlc29sdmVyKHRoaXMudHJhbnNsb2NvU2VydmljZSk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSB0cmFuc2xvY29TZXJ2aWNlOiBUcmFuc2xvY29TZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgdHBsOiBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogKGtleTogc3RyaW5nLCBwYXJhbXM/OiBIYXNoTWFwKSA9PiBhbnkgfT4sXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChUUkFOU0xPQ09fU0NPUEUpIHByaXZhdGUgcHJvdmlkZXJTY29wZTogTWF5YmVBcnJheTxUcmFuc2xvY29TY29wZT4sXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChUUkFOU0xPQ09fTEFORykgcHJpdmF0ZSBwcm92aWRlckxhbmc6IHN0cmluZyB8IG51bGwsXG4gICAgQE9wdGlvbmFsKCkgQEluamVjdChUUkFOU0xPQ09fTE9BRElOR19URU1QTEFURSkgcHJpdmF0ZSBwcm92aWRlZExvYWRpbmdUcGw6IFR5cGU8YW55PiB8IHN0cmluZyxcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgcHJpdmF0ZSBob3N0OiBFbGVtZW50UmVmXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBsaXN0ZW5Ub0xhbmdDaGFuZ2UgPSBzaG91bGRMaXN0ZW5Ub0xhbmdDaGFuZ2VzKHRoaXMudHJhbnNsb2NvU2VydmljZSwgdGhpcy5wcm92aWRlckxhbmcgfHwgdGhpcy5pbmxpbmVMYW5nKTtcblxuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy50cmFuc2xvY29TZXJ2aWNlLmxhbmdDaGFuZ2VzJFxuICAgICAgLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChhY3RpdmVMYW5nID0+IHtcbiAgICAgICAgICBjb25zdCBsYW5nID0gdGhpcy5sYW5nUmVzb2x2ZXIucmVzb2x2ZSh7XG4gICAgICAgICAgICBpbmxpbmU6IHRoaXMuaW5saW5lTGFuZyxcbiAgICAgICAgICAgIHByb3ZpZGVyOiB0aGlzLnByb3ZpZGVyTGFuZyxcbiAgICAgICAgICAgIGFjdGl2ZTogYWN0aXZlTGFuZ1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpcy5wcm92aWRlclNjb3BlKVxuICAgICAgICAgICAgPyBmb3JrSm9pbihcbiAgICAgICAgICAgICAgICAoPFRyYW5zbG9jb1Njb3BlW10+dGhpcy5wcm92aWRlclNjb3BlKS5tYXAocHJvdmlkZXJTY29wZSA9PiB0aGlzLnJlc29sdmVTY29wZShsYW5nLCBwcm92aWRlclNjb3BlKSlcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiB0aGlzLnJlc29sdmVTY29wZShsYW5nLCB0aGlzLnByb3ZpZGVyU2NvcGUpO1xuICAgICAgICB9KSxcbiAgICAgICAgbGlzdGVuT3JOb3RPcGVyYXRvcihsaXN0ZW5Ub0xhbmdDaGFuZ2UpXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5jdXJyZW50TGFuZyA9IHRoaXMubGFuZ1Jlc29sdmVyLnJlc29sdmVMYW5nQmFzZWRPblNjb3BlKHRoaXMucGF0aCk7XG4gICAgICAgIHRoaXMudHBsID09PSBudWxsID8gdGhpcy5zaW1wbGVTdHJhdGVneSgpIDogdGhpcy5zdHJ1Y3R1cmFsU3RyYXRlZ3kodGhpcy5jdXJyZW50TGFuZywgdGhpcy5pbmxpbmVSZWFkKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfSk7XG5cbiAgICBjb25zdCBsb2FkaW5nVHBsID0gdGhpcy5nZXRMb2FkaW5nVHBsKCk7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkICYmIGxvYWRpbmdUcGwpIHtcbiAgICAgIHRoaXMubG9hZGVyVHBsSGFuZGxlciA9IG5ldyBUZW1wbGF0ZUhhbmRsZXIobG9hZGluZ1RwbCwgdGhpcy52Y3IpO1xuICAgICAgdGhpcy5sb2FkZXJUcGxIYW5kbGVyLmF0dGFjaFZpZXcoKTtcbiAgICB9XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgLy8gV2UgbmVlZCB0byBzdXBwb3J0IGR5bmFtaWMga2V5cy9wYXJhbXMsIHNvIGlmIHRoaXMgaXMgbm90IHRoZSBmaXJzdCBjaGFuZ2UgQ0QgY3ljbGVcbiAgICAvLyB3ZSBuZWVkIHRvIHJ1biB0aGUgZnVuY3Rpb24gYWdhaW4gaW4gb3JkZXIgdG8gdXBkYXRlIHRoZSB2YWx1ZVxuICAgIGNvbnN0IG5vdEluaXQgPSBPYmplY3Qua2V5cyhjaGFuZ2VzKS5zb21lKHYgPT4gY2hhbmdlc1t2XS5maXJzdENoYW5nZSA9PT0gZmFsc2UpO1xuICAgIG5vdEluaXQgJiYgdGhpcy5zaW1wbGVTdHJhdGVneSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaW1wbGVTdHJhdGVneSgpIHtcbiAgICB0aGlzLmRldGFjaExvYWRlcigpO1xuICAgIHRoaXMuaG9zdC5uYXRpdmVFbGVtZW50LmlubmVyVGV4dCA9IHRoaXMudHJhbnNsb2NvU2VydmljZS50cmFuc2xhdGUodGhpcy5rZXksIHRoaXMucGFyYW1zLCB0aGlzLmN1cnJlbnRMYW5nKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RydWN0dXJhbFN0cmF0ZWd5KGxhbmc6IHN0cmluZywgcmVhZDogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy50cmFuc2xhdGlvbk1lbW8gPSB7fTtcblxuICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgIC8vIHdoZW4gdGhlIGxhbmcgY2hhbmdlcyB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgcmVmZXJlbmNlIHNvIEFuZ3VsYXIgd2lsbCB1cGRhdGUgdGhlIHZpZXdcbiAgICAgIHRoaXMudmlldy5jb250ZXh0WyckaW1wbGljaXQnXSA9IHRoaXMuZ2V0VHJhbnNsYXRlRm4obGFuZywgcmVhZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGV0YWNoTG9hZGVyKCk7XG4gICAgICB0aGlzLnZpZXcgPSB0aGlzLnZjci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy50cGwsIHtcbiAgICAgICAgJGltcGxpY2l0OiB0aGlzLmdldFRyYW5zbGF0ZUZuKGxhbmcsIHJlYWQpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldFRyYW5zbGF0ZUZuKGxhbmc6IHN0cmluZywgcmVhZDogc3RyaW5nIHwgdW5kZWZpbmVkKTogKGtleTogc3RyaW5nLCBwYXJhbXM/OiBIYXNoTWFwKSA9PiBhbnkge1xuICAgIHJldHVybiAoa2V5OiBzdHJpbmcsIHBhcmFtczogSGFzaE1hcCkgPT4ge1xuICAgICAgY29uc3Qgd2l0aFJlYWQgPSByZWFkID8gYCR7cmVhZH0uJHtrZXl9YCA6IGtleTtcbiAgICAgIGNvbnN0IHdpdGhQYXJhbXMgPSBwYXJhbXMgPyBgJHt3aXRoUmVhZH0ke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCA6IHdpdGhSZWFkO1xuICAgICAgaWYgKHRoaXMudHJhbnNsYXRpb25NZW1vLmhhc093blByb3BlcnR5KHdpdGhQYXJhbXMpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uTWVtb1t3aXRoUGFyYW1zXS52YWx1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJhbnNsYXRpb25NZW1vW3dpdGhQYXJhbXNdID0ge1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHZhbHVlOiB0aGlzLnRyYW5zbG9jb1NlcnZpY2UudHJhbnNsYXRlKHdpdGhSZWFkLCBwYXJhbXMsIGxhbmcpXG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbk1lbW9bd2l0aFBhcmFtc10udmFsdWU7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TG9hZGluZ1RwbCgpOiBWaWV3IHtcbiAgICByZXR1cm4gdGhpcy5pbmxpbmVUcGwgfHwgdGhpcy5wcm92aWRlZExvYWRpbmdUcGw7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbiAmJiB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBkZXRhY2hMb2FkZXIoKSB7XG4gICAgdGhpcy5sb2FkZXJUcGxIYW5kbGVyICYmIHRoaXMubG9hZGVyVHBsSGFuZGxlci5kZXRhY2hWaWV3KCk7XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVTY29wZShsYW5nOiBzdHJpbmcsIHByb3ZpZGVyU2NvcGU6IFRyYW5zbG9jb1Njb3BlKTogT2JzZXJ2YWJsZTxUcmFuc2xhdGlvbiB8IFRyYW5zbGF0aW9uW10+IHtcbiAgICBsZXQgcmVzb2x2ZWRTY29wZSA9IHRoaXMuc2NvcGVSZXNvbHZlci5yZXNvbHZlKHsgaW5saW5lOiB0aGlzLmlubGluZVNjb3BlLCBwcm92aWRlcjogcHJvdmlkZXJTY29wZSB9KTtcbiAgICB0aGlzLnBhdGggPSB0aGlzLmxhbmdSZXNvbHZlci5yZXNvbHZlTGFuZ1BhdGgobGFuZywgcmVzb2x2ZWRTY29wZSk7XG4gICAgY29uc3QgaW5saW5lTG9hZGVyID0gcmVzb2x2ZUlubGluZUxvYWRlcihwcm92aWRlclNjb3BlLCByZXNvbHZlZFNjb3BlKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2xvY29TZXJ2aWNlLl9sb2FkRGVwZW5kZW5jaWVzKHRoaXMucGF0aCwgaW5saW5lTG9hZGVyKTtcbiAgfVxufVxuIl19