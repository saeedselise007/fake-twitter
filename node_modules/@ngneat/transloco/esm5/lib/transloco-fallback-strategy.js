/**
 * @fileoverview added by tsickle
 * Generated from: lib/transloco-fallback-strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, InjectionToken } from '@angular/core';
import { TRANSLOCO_CONFIG } from './transloco.config';
/** @type {?} */
export var TRANSLOCO_FALLBACK_STRATEGY = new InjectionToken('TRANSLOCO_FALLBACK_STRATEGY');
/**
 * @record
 */
export function TranslocoFallbackStrategy() { }
if (false) {
    /**
     * @param {?} failedLang
     * @return {?}
     */
    TranslocoFallbackStrategy.prototype.getNextLangs = function (failedLang) { };
}
var DefaultFallbackStrategy = /** @class */ (function () {
    function DefaultFallbackStrategy(userConfig) {
        this.userConfig = userConfig;
    }
    /**
     * @param {?} failedLang
     * @return {?}
     */
    DefaultFallbackStrategy.prototype.getNextLangs = /**
     * @param {?} failedLang
     * @return {?}
     */
    function (failedLang) {
        /** @type {?} */
        var fallbackLang = this.userConfig.fallbackLang;
        if (!fallbackLang) {
            throw new Error('When using the default fallback, a fallback language must be provided in the config!');
        }
        return Array.isArray(fallbackLang) ? fallbackLang : [fallbackLang];
    };
    /** @nocollapse */
    DefaultFallbackStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [TRANSLOCO_CONFIG,] }] }
    ]; };
    return DefaultFallbackStrategy;
}());
export { DefaultFallbackStrategy };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultFallbackStrategy.prototype.userConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsb2NvLWZhbGxiYWNrLXN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5nbmVhdC90cmFuc2xvY28vIiwic291cmNlcyI6WyJsaWIvdHJhbnNsb2NvLWZhbGxiYWNrLXN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFtQixNQUFNLG9CQUFvQixDQUFDOztBQUV2RSxNQUFNLEtBQU8sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQTRCLDZCQUE2QixDQUFDOzs7O0FBRXZILCtDQUVDOzs7Ozs7SUFEQyw2RUFBMkM7O0FBRzdDO0lBQ0UsaUNBQThDLFVBQTJCO1FBQTNCLGVBQVUsR0FBVixVQUFVLENBQWlCO0lBQUcsQ0FBQzs7Ozs7SUFFN0UsOENBQVk7Ozs7SUFBWixVQUFhLFVBQWtCOztZQUN2QixZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZO1FBQ2pELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzRkFBc0YsQ0FBQyxDQUFDO1NBQ3pHO1FBRUQsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDckUsQ0FBQzs7O2dEQVRZLE1BQU0sU0FBQyxnQkFBZ0I7O0lBVXRDLDhCQUFDO0NBQUEsQUFYRCxJQVdDO1NBWFksdUJBQXVCOzs7Ozs7SUFDdEIsNkNBQTZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVFJBTlNMT0NPX0NPTkZJRywgVHJhbnNsb2NvQ29uZmlnIH0gZnJvbSAnLi90cmFuc2xvY28uY29uZmlnJztcblxuZXhwb3J0IGNvbnN0IFRSQU5TTE9DT19GQUxMQkFDS19TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUcmFuc2xvY29GYWxsYmFja1N0cmF0ZWd5PignVFJBTlNMT0NPX0ZBTExCQUNLX1NUUkFURUdZJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhbnNsb2NvRmFsbGJhY2tTdHJhdGVneSB7XG4gIGdldE5leHRMYW5ncyhmYWlsZWRMYW5nOiBzdHJpbmcpOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIERlZmF1bHRGYWxsYmFja1N0cmF0ZWd5IGltcGxlbWVudHMgVHJhbnNsb2NvRmFsbGJhY2tTdHJhdGVneSB7XG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoVFJBTlNMT0NPX0NPTkZJRykgcHJpdmF0ZSB1c2VyQ29uZmlnOiBUcmFuc2xvY29Db25maWcpIHt9XG5cbiAgZ2V0TmV4dExhbmdzKGZhaWxlZExhbmc6IHN0cmluZykge1xuICAgIGNvbnN0IGZhbGxiYWNrTGFuZyA9IHRoaXMudXNlckNvbmZpZy5mYWxsYmFja0xhbmc7XG4gICAgaWYgKCFmYWxsYmFja0xhbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2hlbiB1c2luZyB0aGUgZGVmYXVsdCBmYWxsYmFjaywgYSBmYWxsYmFjayBsYW5ndWFnZSBtdXN0IGJlIHByb3ZpZGVkIGluIHRoZSBjb25maWchJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZmFsbGJhY2tMYW5nKSA/IGZhbGxiYWNrTGFuZyA6IFtmYWxsYmFja0xhbmddO1xuICB9XG59XG4iXX0=